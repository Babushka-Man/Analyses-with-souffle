
#include "graph_definitions.dl"
#include "positiveness_ir_type.dl"
#include "evenness.dl"

.functor stoi(str: symbol): number
.functor stoiWithUniOp(num: number, op: symbol): number
.functor stoiWithBinOp(num1: number, num2: number, op: symbol): number
.functor unaryOpOnType(type: irType, op: symbol): irType stateful
.functor binaryOpOnTypes(type1: irType, type2: irType, op: symbol): irType stateful


.decl Positiveness(id: number, type: irType<>)

// ----- dealing with literals -----
Positiveness(id, $Positive()) :- vertex(id, "Literal", _, numAsStr), @stoi(numAsStr) > 0. 
Positiveness(id, $Negative()) :- vertex(id, "Literal", _, numAsStr), @stoi(numAsStr) < 0. 
Positiveness(id, $Zero()) :- vertex(id, "Literal", _, numAsStr), @stoi(numAsStr) = 0. 

// ----- dealing with parameters -----
Positiveness(id, $Bottom()) :- vertex(id, "Parameter", _, _).

// ----- dealing with operations -----
Positiveness(srcId, @unaryOpOnType(type, op)) :- 
    vertex(srcId, "UnaryOperation", _, op),
    edge(srcId, dstId, "Data", "operand"),
    vertex(dstId, _, "Data", _),
    Positiveness(dstId, type).

Positiveness(srcId, @binaryOpOnTypes(type1, type2, op)) :- 
    op != "^",
    vertex(srcId, "BinaryOperation", _, op),
    edge(srcId, dstId1, "Data", "left"),
    vertex(dstId1, _, "Data", _),
    Positiveness(dstId1, type1),
    edge(srcId, dstId2, "Data", "right"),
    vertex(dstId2, _, "Data", _),
    Positiveness(dstId2, type2).

Positiveness(srcId, $Positive()) :- 
    op = "^",
    Evenness(dstId2, $Even()),
    vertex(srcId, "BinaryOperation", _, op),
    edge(srcId, dstId1, "Data", "left"),
    vertex(dstId1, _, "Data", _),
    Positiveness(dstId1, type1),
    type1 != $Zero(),
    edge(srcId, dstId2, "Data", "right"),
    vertex(dstId2, _, "Data", _),
    Positiveness(dstId2, _).

Positiveness(srcId, type1) :- 
    op = "^",
    Evenness(dstId2, $UnEven()),
    vertex(srcId, "BinaryOperation", _, op),
    edge(srcId, dstId1, "Data", "left"),
    vertex(dstId1, _, "Data", _),
    Positiveness(dstId1, type1),
    edge(srcId, dstId2, "Data", "right"),
    vertex(dstId2, _, "Data", _),
    Positiveness(dstId2, _).
    
Positiveness(srcId, $Positive()) :- 
    op = "^",
    vertex(srcId, "BinaryOperation", _, op),
    edge(srcId, dstId1, "Data", "left"),
    vertex(dstId1, _, "Data", _),
    Positiveness(dstId1, $Zero()),
    edge(srcId, dstId2, "Data", "right"),
    vertex(dstId2, _, "Data", _),
    Positiveness(dstId2, $Zero()).
    
Positiveness(srcId, $Zero()) :- 
    op = "^",
    vertex(srcId, "BinaryOperation", _, op),
    edge(srcId, dstId1, "Data", "left"),
    vertex(dstId1, _, "Data", _),
    Positiveness(dstId1, $Zero()),
    edge(srcId, dstId2, "Data", "right"),
    vertex(dstId2, _, "Data", _),
    Positiveness(dstId2, type2),
    type2 != $Zero().

// .decl Values(id: number, valueOf: symbol, val: number)
// 
// Values(srcId, name, num) :- 
//     edge(srcId, destId, _, "value"),
//     vertex(srcId, _, _, name),
//     Number(destId, num).


.output Positiveness
// .output Values